@page "/indexdoctor"
@using ProyectoSistemaClinico.Models
@using ProyectoSistemaClinico.Services
@inject NavigationManager NavigationManager
@using System.Linq
@using System.Collections.Generic
@inject DoctorService doctorServices;
@rendermode InteractiveServer

<div class="card">
    <div class="card-header text-center bg-primary">
        <h3 class="text-white"><strong>Doctores</strong></h3>
    </div>

    <div class="card-body">

        <div class="col-8">
            <label class="fw-bold">Filtrar por Fecha:</label>

            <div class="input-group">
                <label class="input-group-text bg-primary text-white">Desde</label>
                <input type="date" class="form-control" @bind="fechaDesde">
                <span class="input-group-text bg-primary text-white">Hasta</span>
                <input type="date" class="form-control" @bind="fechaHasta">
                <button class="btn btn-outline-primary" @onclick="BuscarPorFecha"><i class="fas fa-search"></i> Buscar</button>
            </div>
        </div>
        <div class="row align-items-end justify-content-end mb-4">
          
            <div class="col-3">
                <label class="fw-bold">Filtrar:</label>
                <select class="form-select" @bind="filtrar">
                    <option value="1">ID del Doctor</option>
                    <option value="2">Nombre Completo</option>
                    <option value="3">Especialidad Médica</option>
                </select>
            </div>

            <div class="col-8">
                <label class="fw-bold">Búsqueda:</label>
                <div class="input-group">
                    <input class="form-control" @bind="@busqueda"></input>
                    <button class="btn btn-outline-primary" @onclick="Buscar"><i class="fas fa-search"></i> Buscar</button>
                </div>
            </div>

            <div class="col">
                <a href="/createdoctor" class="btn btn-success"><i class="fas fa-plus"></i> Crear</a>
            </div>
        </div>

        <div>
            <table class="table table-bordered text-center">
                <thead>
                    <tr>
                        <th>ID del Doctor</th>
                        <th>Nombre Completo</th>
                        <th>Especialidad Médica</th>
                        <th>Horario de Disponibilidad</th>
                            <th>Fecha y Hora de Creacion</th>
                        <th>Editar</th>
                        <th>Detalle</th>
                        <th>Eliminar</th>
                    </tr>
                </thead>
                <tbody>
                    @if (ListaDoctores.Any())
                    {
                        @foreach (var doctor in ListaDoctores)
                        {
                            <tr>
                                <td>@doctor.DoctorId</td>
                                <td>@doctor.NombreCompleto</td>
                                <td>@doctor.EspecialidadMedica</td>
                                <td>@doctor.HorarioDisponibilidad</td>
                                <td>@doctor.FechaDeCreacion.ToString("dd/MM/yyyy HH:mm")</td>
                                <td>
                                    <a href="/editardoctor/@doctor.DoctorId" class="bi bi-pencil-square">
                                    </a>
                                </td>
                                <td>
                                    <a href="/detailsdoctor/@doctor.DoctorId" class="bi bi-eye-fill">
                                    </a>
                                </td>
                                <td>
                                    <a href="/deletedoctor/@doctor.DoctorId" class="bi bi-trash3-fill">
                                    </a>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="7" class="text-center"> <label>No hay doctores disponibles</label> </td>
                        </tr>
                    }
                </tbody>
            </table>
            <div class="card-footer bg-light d-flex justify-content-end">
                <div class="btn-group">
                    <a type="button" href="/auth" class="btn btn-outline-danger"><span class="fas fa-arrow-left"></span> Volver </a>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Doctor> ListaDoctores = new List<Doctor>();
    public Doctor Doctor = new Doctor();
        public DateTime? fechaDesde, fechaHasta;
    
    public string filtrar = "1", busqueda = "";

        protected override async Task OnInitializedAsync()
        {
            await CargarCitas();
        }

        public async Task Buscar()
        {
            if (!string.IsNullOrEmpty(busqueda))
            {
                switch (filtrar)
                {
                    case "1":
                        if (int.TryParse(busqueda, out int doctorId))
                        {
                            ListaDoctores = await doctorServices.Listar(c => c.DoctorId == doctorId);
                        }
                        break;
                    case "2":
                        ListaDoctores = await doctorServices.Listar(c => c.NombreCompleto.Contains(busqueda));
                        break;
                case "3":
                    ListaDoctores = await doctorServices.Listar(c => c.EspecialidadMedica.Contains(busqueda));
                    break;
                    default:
                        await CargarCitas();
                        break;
                }
            }
            else
            {
                await CargarCitas();
            }
        }

        public async Task BuscarPorFecha()
        {
            if (fechaDesde != null && fechaHasta != null && fechaDesde <= fechaHasta)
            {
                ListaDoctores = await doctorServices.Listar(c => c.FechaDeCreacion >= fechaDesde && c.FechaDeCreacion <= fechaHasta);
            }
            else
            {
                await CargarCitas();
            }
        }

        private async Task CargarCitas()
        {
            ListaDoctores = await doctorServices.Listar(c => true);
        }
    }


